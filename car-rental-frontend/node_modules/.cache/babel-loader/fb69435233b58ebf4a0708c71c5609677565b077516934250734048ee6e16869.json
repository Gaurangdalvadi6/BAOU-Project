{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8080/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  login: credentials => api.post('/auth/login', credentials),\n  register: userData => api.post('/auth/signup', userData)\n};\n\n// Customer API\nexport const customerAPI = {\n  getAllCars: () => api.get('/public/cars'),\n  getCarById: id => api.get(`/public/car/${id}`),\n  bookCar: bookingData => api.post('/customer/car/book', bookingData),\n  getBookings: userId => api.get(`/customer/car/bookings/${userId}`),\n  searchCars: searchData => api.post('/customer/car/search', searchData)\n};\n\n// Admin API\nexport const adminAPI = {\n  getAllCars: () => api.get('/admin/cars'),\n  getCarById: id => api.get(`/admin/car/${id}`),\n  createCar: carData => {\n    // For multipart form data, we need to set the correct headers\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    return api.post('/admin/car', carData, config);\n  },\n  updateCar: (id, carData) => {\n    // For multipart form data, we need to set the correct headers\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    return api.put(`/admin/car/${id}`, carData, config);\n  },\n  deleteCar: id => api.delete(`/admin/car/${id}`),\n  getBookings: () => api.get('/admin/car/bookings'),\n  changeBookingStatus: (bookingId, status) => api.get(`/admin/car/booking/${bookingId}/${status}`),\n  searchCars: searchData => api.post('/admin/car/search', searchData)\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","login","credentials","post","register","userData","customerAPI","getAllCars","get","getCarById","id","bookCar","bookingData","getBookings","userId","searchCars","searchData","adminAPI","createCar","carData","updateCar","put","deleteCar","delete","changeBookingStatus","bookingId"],"sources":["C:/Users/GAURANG/Desktop/Gaurang bhai Project/Car-Rental_Spring/car-rental-frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:8080/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor to handle errors\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth API\r\nexport const authAPI = {\r\n  login: (credentials) => api.post('/auth/login', credentials),\r\n  register: (userData) => api.post('/auth/signup', userData),\r\n};\r\n\r\n// Customer API\r\nexport const customerAPI = {\r\n  getAllCars: () => api.get('/public/cars'),\r\n  getCarById: (id) => api.get(`/public/car/${id}`),\r\n  bookCar: (bookingData) => api.post('/customer/car/book', bookingData),\r\n  getBookings: (userId) => api.get(`/customer/car/bookings/${userId}`),\r\n  searchCars: (searchData) => api.post('/customer/car/search', searchData),\r\n};\r\n\r\n// Admin API\r\nexport const adminAPI = {\r\n  getAllCars: () => api.get('/admin/cars'),\r\n  getCarById: (id) => api.get(`/admin/car/${id}`),\r\n  createCar: (carData) => {\r\n    // For multipart form data, we need to set the correct headers\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    };\r\n    return api.post('/admin/car', carData, config);\r\n  },\r\n  updateCar: (id, carData) => {\r\n    // For multipart form data, we need to set the correct headers\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    };\r\n    return api.put(`/admin/car/${id}`, carData, config);\r\n  },\r\n  deleteCar: (id) => api.delete(`/admin/car/${id}`),\r\n  getBookings: () => api.get('/admin/car/bookings'),\r\n  changeBookingStatus: (bookingId, status) => \r\n    api.get(`/admin/car/booking/${bookingId}/${status}`),\r\n  searchCars: (searchData) => api.post('/admin/car/search', searchData),\r\n};\r\n\r\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B;AAEhD,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAZ,GAAG,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClCR,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;IAChCT,YAAY,CAACS,UAAU,CAAC,MAAM,CAAC;IAC/BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMU,OAAO,GAAG;EACrBC,KAAK,EAAGC,WAAW,IAAKxB,GAAG,CAACyB,IAAI,CAAC,aAAa,EAAED,WAAW,CAAC;EAC5DE,QAAQ,EAAGC,QAAQ,IAAK3B,GAAG,CAACyB,IAAI,CAAC,cAAc,EAAEE,QAAQ;AAC3D,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAG;EACzBC,UAAU,EAAEA,CAAA,KAAM7B,GAAG,CAAC8B,GAAG,CAAC,cAAc,CAAC;EACzCC,UAAU,EAAGC,EAAE,IAAKhC,GAAG,CAAC8B,GAAG,CAAC,eAAeE,EAAE,EAAE,CAAC;EAChDC,OAAO,EAAGC,WAAW,IAAKlC,GAAG,CAACyB,IAAI,CAAC,oBAAoB,EAAES,WAAW,CAAC;EACrEC,WAAW,EAAGC,MAAM,IAAKpC,GAAG,CAAC8B,GAAG,CAAC,0BAA0BM,MAAM,EAAE,CAAC;EACpEC,UAAU,EAAGC,UAAU,IAAKtC,GAAG,CAACyB,IAAI,CAAC,sBAAsB,EAAEa,UAAU;AACzE,CAAC;;AAED;AACA,OAAO,MAAMC,QAAQ,GAAG;EACtBV,UAAU,EAAEA,CAAA,KAAM7B,GAAG,CAAC8B,GAAG,CAAC,aAAa,CAAC;EACxCC,UAAU,EAAGC,EAAE,IAAKhC,GAAG,CAAC8B,GAAG,CAAC,cAAcE,EAAE,EAAE,CAAC;EAC/CQ,SAAS,EAAGC,OAAO,IAAK;IACtB;IACA,MAAMlC,MAAM,GAAG;MACbJ,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC;IACD,OAAOH,GAAG,CAACyB,IAAI,CAAC,YAAY,EAAEgB,OAAO,EAAElC,MAAM,CAAC;EAChD,CAAC;EACDmC,SAAS,EAAEA,CAACV,EAAE,EAAES,OAAO,KAAK;IAC1B;IACA,MAAMlC,MAAM,GAAG;MACbJ,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC;IACD,OAAOH,GAAG,CAAC2C,GAAG,CAAC,cAAcX,EAAE,EAAE,EAAES,OAAO,EAAElC,MAAM,CAAC;EACrD,CAAC;EACDqC,SAAS,EAAGZ,EAAE,IAAKhC,GAAG,CAAC6C,MAAM,CAAC,cAAcb,EAAE,EAAE,CAAC;EACjDG,WAAW,EAAEA,CAAA,KAAMnC,GAAG,CAAC8B,GAAG,CAAC,qBAAqB,CAAC;EACjDgB,mBAAmB,EAAEA,CAACC,SAAS,EAAE9B,MAAM,KACrCjB,GAAG,CAAC8B,GAAG,CAAC,sBAAsBiB,SAAS,IAAI9B,MAAM,EAAE,CAAC;EACtDoB,UAAU,EAAGC,UAAU,IAAKtC,GAAG,CAACyB,IAAI,CAAC,mBAAmB,EAAEa,UAAU;AACtE,CAAC;AAED,eAAetC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}