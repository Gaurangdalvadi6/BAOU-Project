{"ast":null,"code":"/**\r\n * Convert a byte array to base64 string for browser environment\r\n * @param {Array} byteArray - Array of bytes\r\n * @returns {string} Base64 string\r\n */\nexport const bytesToBase64 = byteArray => {\n  if (!byteArray || !Array.isArray(byteArray)) {\n    return '';\n  }\n\n  // Convert byte array to Uint8Array\n  const uint8Array = new Uint8Array(byteArray);\n\n  // Convert to base64 using browser's built-in btoa function\n  let binary = '';\n  for (let i = 0; i < uint8Array.length; i++) {\n    binary += String.fromCharCode(uint8Array[i]);\n  }\n  return btoa(binary);\n};\n\n/**\r\n * Create a data URL for an image from byte array\r\n * @param {Array} byteArray - Array of bytes\r\n * @param {string} mimeType - MIME type (default: 'image/jpeg')\r\n * @returns {string} Data URL\r\n */\nexport const createImageDataUrl = (byteArray, mimeType = 'image/jpeg') => {\n  const base64 = bytesToBase64(byteArray);\n  if (!base64) {\n    return '';\n  }\n  return `data:${mimeType};base64,${base64}`;\n};","map":{"version":3,"names":["bytesToBase64","byteArray","Array","isArray","uint8Array","Uint8Array","binary","i","length","String","fromCharCode","btoa","createImageDataUrl","mimeType","base64"],"sources":["C:/Users/GAURANG/Desktop/Gaurang bhai Project/Car-Rental_Spring/car-rental-frontend/src/utils/imageUtils.js"],"sourcesContent":["/**\r\n * Convert a byte array to base64 string for browser environment\r\n * @param {Array} byteArray - Array of bytes\r\n * @returns {string} Base64 string\r\n */\r\nexport const bytesToBase64 = (byteArray) => {\r\n  if (!byteArray || !Array.isArray(byteArray)) {\r\n    return '';\r\n  }\r\n  \r\n  // Convert byte array to Uint8Array\r\n  const uint8Array = new Uint8Array(byteArray);\r\n  \r\n  // Convert to base64 using browser's built-in btoa function\r\n  let binary = '';\r\n  for (let i = 0; i < uint8Array.length; i++) {\r\n    binary += String.fromCharCode(uint8Array[i]);\r\n  }\r\n  \r\n  return btoa(binary);\r\n};\r\n\r\n/**\r\n * Create a data URL for an image from byte array\r\n * @param {Array} byteArray - Array of bytes\r\n * @param {string} mimeType - MIME type (default: 'image/jpeg')\r\n * @returns {string} Data URL\r\n */\r\nexport const createImageDataUrl = (byteArray, mimeType = 'image/jpeg') => {\r\n  const base64 = bytesToBase64(byteArray);\r\n  if (!base64) {\r\n    return '';\r\n  }\r\n  return `data:${mimeType};base64,${base64}`;\r\n}; "],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,aAAa,GAAIC,SAAS,IAAK;EAC1C,IAAI,CAACA,SAAS,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,SAAS,CAAC,EAAE;IAC3C,OAAO,EAAE;EACX;;EAEA;EACA,MAAMG,UAAU,GAAG,IAAIC,UAAU,CAACJ,SAAS,CAAC;;EAE5C;EACA,IAAIK,MAAM,GAAG,EAAE;EACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,UAAU,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;IAC1CD,MAAM,IAAIG,MAAM,CAACC,YAAY,CAACN,UAAU,CAACG,CAAC,CAAC,CAAC;EAC9C;EAEA,OAAOI,IAAI,CAACL,MAAM,CAAC;AACrB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMM,kBAAkB,GAAGA,CAACX,SAAS,EAAEY,QAAQ,GAAG,YAAY,KAAK;EACxE,MAAMC,MAAM,GAAGd,aAAa,CAACC,SAAS,CAAC;EACvC,IAAI,CAACa,MAAM,EAAE;IACX,OAAO,EAAE;EACX;EACA,OAAO,QAAQD,QAAQ,WAAWC,MAAM,EAAE;AAC5C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}