{"ast":null,"code":"/**\r\n * Get the full image URL from image path\r\n * @param {string} imagePath - Image path from backend\r\n * @returns {string} Full image URL\r\n */\nexport const getImageUrl = imagePath => {\n  if (!imagePath) {\n    return '/placeholder-car.jpg'; // Default placeholder image\n  }\n\n  // If it's already a full URL, return as is\n  if (imagePath.startsWith('http://') || imagePath.startsWith('https://')) {\n    return imagePath;\n  }\n\n  // If it's a relative path, prepend the API base URL\n  const baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:8080';\n  return `${baseUrl}/images/${imagePath}`;\n};\n\n/**\r\n * Create a data URL for an image from byte array (for backward compatibility)\r\n * @param {Array} byteArray - Array of bytes\r\n * @param {string} mimeType - MIME type (default: 'image/jpeg')\r\n * @returns {string} Data URL\r\n */\nexport const createImageDataUrl = (byteArray, mimeType = 'image/jpeg') => {\n  if (!byteArray || !Array.isArray(byteArray)) {\n    return '/placeholder-car.jpg';\n  }\n\n  // Convert byte array to Uint8Array\n  const uint8Array = new Uint8Array(byteArray);\n\n  // Convert to base64 using browser's built-in btoa function\n  let binary = '';\n  for (let i = 0; i < uint8Array.length; i++) {\n    binary += String.fromCharCode(uint8Array[i]);\n  }\n  const base64 = btoa(binary);\n  if (!base64) {\n    return '/placeholder-car.jpg';\n  }\n  return `data:${mimeType};base64,${base64}`;\n};","map":{"version":3,"names":["getImageUrl","imagePath","startsWith","baseUrl","process","env","REACT_APP_API_URL","createImageDataUrl","byteArray","mimeType","Array","isArray","uint8Array","Uint8Array","binary","i","length","String","fromCharCode","base64","btoa"],"sources":["C:/Users/GAURANG/Desktop/Gaurang bhai Project/Car-Rental_Spring/car-rental-frontend/src/utils/imageUtils.js"],"sourcesContent":["/**\r\n * Get the full image URL from image path\r\n * @param {string} imagePath - Image path from backend\r\n * @returns {string} Full image URL\r\n */\r\nexport const getImageUrl = (imagePath) => {\r\n  if (!imagePath) {\r\n    return '/placeholder-car.jpg'; // Default placeholder image\r\n  }\r\n  \r\n  // If it's already a full URL, return as is\r\n  if (imagePath.startsWith('http://') || imagePath.startsWith('https://')) {\r\n    return imagePath;\r\n  }\r\n  \r\n  // If it's a relative path, prepend the API base URL\r\n  const baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:8080';\r\n  return `${baseUrl}/images/${imagePath}`;\r\n};\r\n\r\n/**\r\n * Create a data URL for an image from byte array (for backward compatibility)\r\n * @param {Array} byteArray - Array of bytes\r\n * @param {string} mimeType - MIME type (default: 'image/jpeg')\r\n * @returns {string} Data URL\r\n */\r\nexport const createImageDataUrl = (byteArray, mimeType = 'image/jpeg') => {\r\n  if (!byteArray || !Array.isArray(byteArray)) {\r\n    return '/placeholder-car.jpg';\r\n  }\r\n  \r\n  // Convert byte array to Uint8Array\r\n  const uint8Array = new Uint8Array(byteArray);\r\n  \r\n  // Convert to base64 using browser's built-in btoa function\r\n  let binary = '';\r\n  for (let i = 0; i < uint8Array.length; i++) {\r\n    binary += String.fromCharCode(uint8Array[i]);\r\n  }\r\n  \r\n  const base64 = btoa(binary);\r\n  if (!base64) {\r\n    return '/placeholder-car.jpg';\r\n  }\r\n  return `data:${mimeType};base64,${base64}`;\r\n}; "],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,WAAW,GAAIC,SAAS,IAAK;EACxC,IAAI,CAACA,SAAS,EAAE;IACd,OAAO,sBAAsB,CAAC,CAAC;EACjC;;EAEA;EACA,IAAIA,SAAS,CAACC,UAAU,CAAC,SAAS,CAAC,IAAID,SAAS,CAACC,UAAU,CAAC,UAAU,CAAC,EAAE;IACvE,OAAOD,SAAS;EAClB;;EAEA;EACA,MAAME,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;EACxE,OAAO,GAAGH,OAAO,WAAWF,SAAS,EAAE;AACzC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMM,kBAAkB,GAAGA,CAACC,SAAS,EAAEC,QAAQ,GAAG,YAAY,KAAK;EACxE,IAAI,CAACD,SAAS,IAAI,CAACE,KAAK,CAACC,OAAO,CAACH,SAAS,CAAC,EAAE;IAC3C,OAAO,sBAAsB;EAC/B;;EAEA;EACA,MAAMI,UAAU,GAAG,IAAIC,UAAU,CAACL,SAAS,CAAC;;EAE5C;EACA,IAAIM,MAAM,GAAG,EAAE;EACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,UAAU,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;IAC1CD,MAAM,IAAIG,MAAM,CAACC,YAAY,CAACN,UAAU,CAACG,CAAC,CAAC,CAAC;EAC9C;EAEA,MAAMI,MAAM,GAAGC,IAAI,CAACN,MAAM,CAAC;EAC3B,IAAI,CAACK,MAAM,EAAE;IACX,OAAO,sBAAsB;EAC/B;EACA,OAAO,QAAQV,QAAQ,WAAWU,MAAM,EAAE;AAC5C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}